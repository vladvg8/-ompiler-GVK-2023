#include "Error.h"

namespace Error {
	ERROR errors[ERROR_MAX_ENTRY] = {
		ERROR_ENTRY(0, "Недопустимый код ошибки"),
		ERROR_ENTRY(1, "Системный сбой"),
		ERROR_ENTRY_NODEF(2), ERROR_ENTRY_NODEF(3), ERROR_ENTRY_NODEF(4), ERROR_ENTRY_NODEF(5),
		ERROR_ENTRY_NODEF(6), ERROR_ENTRY_NODEF(7), ERROR_ENTRY_NODEF(8), ERROR_ENTRY_NODEF(9),
		ERROR_ENTRY_NODEF10(10), ERROR_ENTRY_NODEF10(20), ERROR_ENTRY_NODEF10(30), ERROR_ENTRY_NODEF10(40), ERROR_ENTRY_NODEF10(50),
		ERROR_ENTRY_NODEF10(60), ERROR_ENTRY_NODEF10(70), ERROR_ENTRY_NODEF10(80), ERROR_ENTRY_NODEF10(90),
		ERROR_ENTRY(100, "Параметр -in должен быть задан"),
		ERROR_ENTRY_NODEF(101), ERROR_ENTRY_NODEF(102), ERROR_ENTRY_NODEF(103),
		ERROR_ENTRY(104, "Превышена длина входного параметра"),
		ERROR_ENTRY_NODEF(105), ERROR_ENTRY_NODEF(106), ERROR_ENTRY_NODEF(107),
		ERROR_ENTRY_NODEF(108), ERROR_ENTRY_NODEF(109),
		ERROR_ENTRY(110, "IN: Ошибка при открытии файла с исходным кодом"),
		ERROR_ENTRY(111, "IN: Недопустимый символ в исходном файле"),
		ERROR_ENTRY(112, "IN: Ошибка при создании файла протокола"),
		ERROR_ENTRY(113, "IN: Превышена длина лексемы"),
		ERROR_ENTRY(114, "IN: Превышена максимальная длина строкового литерала"),
		ERROR_ENTRY(115, "IN: Неправильно объявленный символьный литерал"),
		ERROR_ENTRY(116, "IN: Обнаружена незакрытый строковый литерал"),
		ERROR_ENTRY_NODEF(117),
		ERROR_ENTRY_NODEF(118),
		ERROR_ENTRY_NODEF(119),
		ERROR_ENTRY(120, "FST: Не удалось разобрать лексему из входного файла"),
		ERROR_ENTRY(121, "FST: Объявлен идентификатор без типа"),
		ERROR_ENTRY(122, "FST: Функция main объявлена более одного раза"),
		ERROR_ENTRY(123, "FST: Не объявлена функция main"),
		ERROR_ENTRY(124, "FST: Используется необъявленный идентификатор"),
		ERROR_ENTRY(125, "FST: Функция main не принимает параметров"),
		ERROR_ENTRY(126, "FST: Нельзя использовать какие-либо структуры между объявлением функции и её началом"),
		ERROR_ENTRY_NODEF(127),
		ERROR_ENTRY_NODEF(128),
		ERROR_ENTRY(129, "POLISHNOTATION: Не удалось выполнить преобразование в польскую запись"),//1
		ERROR_ENTRY(130, "LT: Превышен размер таблицы лексем"),
		ERROR_ENTRY(131, "IT: Превышен размер таблицы идентификаторов"),
		ERROR_ENTRY_NODEF(132),
		ERROR_ENTRY_NODEF(133),
		ERROR_ENTRY_NODEF(134),
		ERROR_ENTRY_NODEF(135),
		ERROR_ENTRY_NODEF(136),
		ERROR_ENTRY_NODEF(137),
		ERROR_ENTRY_NODEF(138),
		ERROR_ENTRY_NODEF(139),
		ERROR_ENTRY_NODEF10(140), ERROR_ENTRY_NODEF10(150),
		ERROR_ENTRY_NODEF10(160), ERROR_ENTRY_NODEF10(170), ERROR_ENTRY_NODEF10(180), ERROR_ENTRY_NODEF10(190),
		ERROR_ENTRY_NODEF100(200), ERROR_ENTRY_NODEF100(300), ERROR_ENTRY_NODEF100(400), ERROR_ENTRY_NODEF100(500),
		ERROR_ENTRY(600, "MFST: Неверная структура программы"),
		ERROR_ENTRY(601, "MFST: Ошибка в операторе"),
		ERROR_ENTRY(602, "MFST: Ошибка в возращаемом значении"),
		ERROR_ENTRY(603, "MFST: Ошибка в параметрах функции"),
		ERROR_ENTRY(604, "MFST: Ошибка в выражении"),
		ERROR_ENTRY(605, ""),
		ERROR_ENTRY(606, ""),
		ERROR_ENTRY(607, ""),
		ERROR_ENTRY(608, ""),
		ERROR_ENTRY(609, ""),
		ERROR_ENTRY_NODEF10(610),
		ERROR_ENTRY_NODEF10(620),
		ERROR_ENTRY_NODEF10(630),
		ERROR_ENTRY_NODEF10(640),
		ERROR_ENTRY_NODEF10(650),
		ERROR_ENTRY_NODEF10(660),
		ERROR_ENTRY_NODEF10(670),
		ERROR_ENTRY_NODEF10(680),
		ERROR_ENTRY_NODEF10(690),
		ERROR_ENTRY(700, "SA: Тип возвращаемого значения функции не соответствует возвращаемому значению"),
		ERROR_ENTRY(701, "SA: Не совпадает количество параметров функции при вызове и объявлении"),
		ERROR_ENTRY(702, "SA: Не совпадают типы параметров функции при вызове и объявлении"),
		ERROR_ENTRY(703, "SA: Типы данных, используемые в выражении, не совпадают"),
		ERROR_ENTRY(704, "SA: Попытка вызвать операцию, неподдерживаемую типом данных"),
		ERROR_ENTRY(705, "SA: Превышение максимального количества параметров функции (16)"),
		ERROR_ENTRY(706, "SA: Невозможно использовать идентификатор функции кроме как для её вызова"),
		ERROR_ENTRY(707, ""),
		ERROR_ENTRY(708, ""),
		ERROR_ENTRY(709, ""),
		ERROR_ENTRY_NODEF10(710),
		ERROR_ENTRY_NODEF10(720),
		ERROR_ENTRY_NODEF10(730),
		ERROR_ENTRY_NODEF10(740),
		ERROR_ENTRY_NODEF10(750),
		ERROR_ENTRY_NODEF10(760),
		ERROR_ENTRY_NODEF10(770),
		ERROR_ENTRY_NODEF10(780),
		ERROR_ENTRY_NODEF10(790),
		ERROR_ENTRY_NODEF100(800),
		ERROR_ENTRY_NODEF100(900),
	};
	ERROR geterror(int id) {
		return errors[id];

	}
	ERROR geterrorin(int id, int line = -1, int col = -1) {
		ERROR err = errors[id];
		err.inext.col = col;
		err.inext.line = line;
		return err;
	}
}